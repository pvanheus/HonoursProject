
@inproceedings{gostelow_view_1979,
	address = {Los Alamitos, {CA}, {USA}},
	title = {A view of dataflow},
	volume = {0},
	doi = {http://doi.ieeecomputersociety.org/10.1109/AFIPS.1979.21},
	booktitle = {Managing Requirements Knowledge, International Workshop on},
	publisher = {{IEEE} Computer Society},
	author = {Gostelow, Kim P. and Thomas, Robert E.},
	year = {1979},
	pages = {629},
	annote = {Complete {PDF} document was either not available or accessible. Please make sure you're logged in to the digital library to retrieve the complete {PDF} document.},
	file = {50870629.pdf:/home/pvh/.mozilla/firefox/pp9q0w3a.default/zotero/storage/5FQBGAW2/50870629.pdf:application/pdf;A view of dataflow:/home/pvh/.mozilla/firefox/pp9q0w3a.default/zotero/storage/X9GT66E9/AFIPS.1979.html:text/html}
},

@article{hils_visual_1992,
	title = {Visual languages and computing survey: Data flow visual programming languages},
	volume = {3},
	issn = {{1045-926X}},
	shorttitle = {Visual languages and computing survey},
	url = {http://www.sciencedirect.com/science/article/pii/1045926X9290034J},
	doi = {10.1016/1045-926X(92)90034-J},
	abstract = {The data flow model is a popular model on which to base a visual programming language. This paper describes alternatives available to a designer of data flow languages, describes many of the languages, discusses some strengths of the languages, and discusses some unsolved problems in the design of data flow languages.},
	number = {1},
	journal = {Journal of Visual Languages \& Computing},
	author = {Hils, Daniel D},
	month = mar,
	year = {1992},
	pages = {69--101},
	file = {Hils_visual.pdf:/home/pvh/.mozilla/firefox/pp9q0w3a.default/zotero/storage/D5TGCECA/Hils_visual.pdf:application/pdf;ScienceDirect Snapshot:/home/pvh/.mozilla/firefox/pp9q0w3a.default/zotero/storage/WAPRUN2X/1045926X9290034J.html:text/html}
},

@article{blackwell_cognitive_2001,
	title = {Cognitive Factors in Programming with Diagrams},
	volume = {15},
	url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.31.8691},
	abstract = {Visual programming languages aim to broaden the use of diagrams within the software industry, to the
      
      extent that they are integrated into the programming language itself. As a result, they provide an ideal
      
      opportunity to study the benefits of diagrams as an external representation during problem solving: not
      
      only is programming a challenging problem-solving activity, but the effect of diagram usage can be
      
      directly assessed by comparing performance while using a visual programming language...},
	number = {1/2},
	journal = {Artificial Intelligence Review},
	author = {Blackwell, Alan and Whitley, Kirsten and Good, Judith and Petre, Marian},
	year = {2001},
	keywords = {evaluation, Psychology, software\_engineering},
	pages = {95--114},
	file = {aire.pdf:/home/pvh/.mozilla/firefox/pp9q0w3a.default/zotero/storage/ZKJHTTCC/aire.pdf:application/pdf;CiteSeerX — Cognitive Factors in Programming with Diagrams:/home/pvh/.mozilla/firefox/pp9q0w3a.default/zotero/storage/275FT9KQ/summary.html:text/html}
},

@article{papadopoulos_multithreading:_1991,
	title = {Multithreading: a revisionist view of dataflow architectures},
	volume = {19},
	issn = {0163-5964},
	shorttitle = {Multithreading},
	url = {http://doi.acm.org/10.1145/115953.115986},
	doi = {10.1145/115953.115986},
	number = {3},
	journal = {{SIGARCH} Comput. Archit. News},
	author = {Papadopoulos, Gregory M. and Traub, Kenneth R.},
	month = apr,
	year = {1991},
	pages = {342–351},
	file = {Memo-330.pdf:/home/pvh/.mozilla/firefox/pp9q0w3a.default/zotero/storage/R6GDGNVM/Memo-330.pdf:application/pdf}
},

@article{lee_dataflow_1995,
	title = {Dataflow process networks},
	volume = {83},
	issn = {0018-9219},
	doi = {10.1109/5.381846},
	abstract = {We review a model of computation used in industrial practice in signal processing software environments and experimentally and other contexts. We give this model the name ldquo;dataflow process networks, rdquo; and study its formal properties as well as its utility as a basis for programming language design. Variants of this model are used in commercial visual programming systems such as {SPW} from the Alta Group of Cadence (formerly Comdisco Systems), {COSSAP} from Synopsys (formerly Cadis), the {DSP} Station from Mentor Graphics, and Hypersignal from Hyperception. They are also used in research software such as Khoros from the University of New Mexico and Ptolemy from the University of California at Berkeley, among many others. Dataflow process networks are shown to be a special case of Kahn process networks, a model of computation where a number of concurrent processes communicate through unidirectional {FIFO} channels, where writes to the channel are nonblocking, and reads are blocking. In dataflow process networks, each process consists of repeated ldquo;firings rdquo; of a dataflow ldquo;actor. rdquo; An actor defines a (often functional) quantum of computation. By dividing processes into actor firings, the considerable overhead of context switching incurred in most implementations of Kahn process networks is avoided. We relate dataflow process networks to other dataflow models, including those used in dataflow machines, such as static dataflow and the tagged-token model. We also relate dataflow process networks to functional languages such as Haskell, and show that modern language concepts such as higher-order functions and polymorphism can be used effectively in dataflow process networks. A number of programming examples using a visual syntax are given},
	number = {5},
	journal = {Proceedings of the {IEEE}},
	author = {Lee, {E.A.} and Parks, {T.M.}},
	month = may,
	year = {1995},
	keywords = {commercial visual programming systems, context switching, {COSSAP}, data flow computing, dataflow process networks, {DSP} Station, functional languages, Haskell, higher-order functions, Hypersignal, Kahn process networks, Khoros, parallel programming, polymorphism, programming environments, programming language design, Signal processing, signal processing software environments, {SPW}, static dataflow, tagged-token model, unidirectional {FIFO} channels, visual languages, visual programming, visual syntax},
	pages = {773 --801},
	file = {10.1.1.21.2539.pdf:/home/pvh/.mozilla/firefox/pp9q0w3a.default/zotero/storage/KUWTI4R5/10.1.1.21.2539.pdf:application/pdf;IEEE Xplore Abstract Record:/home/pvh/.mozilla/firefox/pp9q0w3a.default/zotero/storage/UI4GXV5E/login.html:text/html}
},

@inproceedings{blackwell_does_1999,
	title = {Does metaphor increase visual language usability?},
	url = {http://www.cl.cam.ac.uk/~afb21/publications/VL99.html},
	doi = {10.1109/VL.1999.795910},
	abstract = {Previous research suggests that the graphical metaphor should increase the usability of visual programming languages {(VPLs)} by providing an instructional aid when learning to use the language. This paper describes three experiments which manipulated the degree of metaphor in {VPLs.} In the first, an implicit pictorial metaphor was added to a data flow language, while in the second and third an explicit explanatory metaphor was provided for diagrams showing computational concepts. In both cases, the performance of novices was compared to that of expert programmers, in order to judge the improvement in usability that might result from this instructional device. The resulting benefits of metaphor were smaller than expected especially relative to the advantage of experience. This suggests that metaphor may not be an essential component in the usability of {VPLs}},
	booktitle = {Visual Languages, 1999. Proceedings. 1999 {IEEE} Symposium on},
	author = {Blackwell, {A.F.} and Green, {T.R.G.}},
	year = {1999},
	keywords = {computational concept, computer science education, data flow computing, data flow language, diagrams, expert programmers, explicit explanatory metaphor, graphical metaphor, implicit pictorial metaphor, instructional aid, novice performance, visual languages, visual programming, visual programming language usability},
	pages = {246 --253},
	file = {Does Metaphor Increase Visual Language Usability?:/home/pvh/.mozilla/firefox/pp9q0w3a.default/zotero/storage/TD7QQ5T2/VL99.html:text/html;IEEE Xplore Abstract Record:/home/pvh/.mozilla/firefox/pp9q0w3a.default/zotero/storage/X7UCVAUR/login.html:text/html}
},

@article{johnston_advances_2004,
	title = {Advances in dataflow programming languages},
	volume = {36},
	issn = {0360-0300},
	url = {http://doi.acm.org/10.1145/1013208.1013209},
	doi = {10.1145/1013208.1013209},
	abstract = {Many developments have taken place within dataflow programming languages in the past decade. In particular, there has been a great deal of activity and advancement in the field of dataflow visual programming languages. The motivation for this article is to review the content of these recent developments and how they came about. It is supported by an initial review of dataflow programming in the 1970s and 1980s that led to current topics of research. It then discusses how dataflow programming evolved toward a hybrid von Neumann dataflow formulation, and adopted a more coarse-grained approach. Recent trends toward dataflow visual programming languages are then discussed with reference to key graphical dataflow languages and their development environments. Finally, the article details four key open topics in dataflow programming languages.},
	number = {1},
	journal = {{ACM} Comput. Surv.},
	author = {Johnston, Wesley M. and Hanna, J. R. Paul and Millar, Richard J.},
	month = mar,
	year = {2004},
	keywords = {component software, co-ordination languages, Dataflow, data flow visual programming, graphical programming, multithreading, Software engineering},
	pages = {1–34},
	file = {DataFlowProgrammingLanguages.pdf:/home/pvh/.mozilla/firefox/pp9q0w3a.default/zotero/storage/XVHV8QCI/DataFlowProgrammingLanguages.pdf:application/pdf}
},

@article{green_usability_1996,
	title = {Usability Analysis of Visual Programming Environments: a `cognitive dimensions' framework},
	volume = {7},
	shorttitle = {Usability Analysis of Visual Programming Environments},
	abstract = {The cognitive dimensions framework is a broad-brush evaluation technique for interactive  devices and for non-interactive notations. It sets out a small vocabulary of terms designed to  capture the cognitively-relevant aspects of structure, and shows how they can be traded off  against each other. The purpose of this paper is to propose the framework as an evaluation  technique for visual programming environments. We apply it to two commercially-available  dataflow languages (with further examples from other systems) and conclude that it is effective  and insightful; other {HCI-based} evaluation techniques focus on different aspects and  would make good complements. Insofar as the examples we used are representative, current  {VPLs} are successful in achieving a good `closeness of match', but designers need to consider  the `viscosity' (resistance to local change) and the `secondary notation' (possibility of conveying  extra meaning by choice of layout, colour, etc.).},
	journal = {{JOURNAL} {OF} {VISUAL} {LANGUAGES} {AND} {COMPUTING}},
	author = {Green, T. R. G. and Petre, M.},
	year = {1996},
	pages = {131–174},
	file = {10.1.1.54.3584.pdf:/home/pvh/.mozilla/firefox/pp9q0w3a.default/zotero/storage/8WVBWSVI/10.1.1.54.3584.pdf:application/pdf;Citeseer - Full Text PDF:/home/pvh/.mozilla/firefox/pp9q0w3a.default/zotero/storage/43T2TDKZ/Green and Petre - 1996 - Usability Analysis of Visual Programming Environme.pdf:application/pdf;Citeseer - Snapshot:/home/pvh/.mozilla/firefox/pp9q0w3a.default/zotero/storage/VFJC29NJ/summary.html:text/html}
},

@article{chattratichart_exploring_2002,
	title = {Exploring the Effect of {Control-Flow} and Traversal Direction on {VPL} Usability for Novices},
	volume = {13},
	issn = {{1045-926X}},
	url = {http://www.sciencedirect.com/science/article/pii/S1045926X02902405},
	doi = {10.1006/jvlc.2002.0240},
	abstract = {Programming is a hard cognitive activity, especially for novices who also have to struggle with learning the intricacies of the programming language syntax. We postulate that a well-designed diagrammatic visual programming language {(VPL)} to replace or substitute a textual programming language may help in the learning programming process. Our research focuses on the suitability of diagrammatic notations for such a {VPL.} In this paper, we report results from two experimental studies into diagrammatic notations. The first experiment shows the superiority of three visual representations over a conventional style textual program in both control- and data-flow paradigms. The result also shows the effect of programming paradigm on novices' performance. The second experiment focuses on two aspects of program flow representation: the graphical representation to be used for sequencing, and the traversal direction required of diagram users. It reveals that graphical representation does not affect performance in tracing program flow but that traversal direction makes a difference in cognitive demand on users. The evidence also indicates a control-flow preference among novices.},
	number = {5},
	journal = {Journal of Visual Languages \& Computing},
	author = {{CHATTRATICHART}, {JARINEE} and {KULJIS}, {JASNA}},
	month = oct,
	year = {2002},
	keywords = {{VPL} usability, Novice programmers, Diagrammatic notation, Control flow representations, Programming paradigm},
	pages = {471--500},
	file = {1-s2.0-S1045926X02902405-main.pdf:/home/pvh/.mozilla/firefox/pp9q0w3a.default/zotero/storage/TSN7P8PT/1-s2.0-S1045926X02902405-main.pdf:application/pdf;ScienceDirect Snapshot:/home/pvh/.mozilla/firefox/pp9q0w3a.default/zotero/storage/3I4SZ6CT/S1045926X02902405.html:text/html}
},

@article{pane_studying_2001,
	title = {Studying the language and structure in non-programmers' solutions to programming problems},
	volume = {54},
	issn = {1071-5819},
	url = {http://www.sciencedirect.com/science/article/pii/S1071581900904105},
	doi = {10.1006/ijhc.2000.0410},
	abstract = {Programming may be more difficult than necessary because it requires solutions to be expressed in ways that are not familiar or natural for beginners. To identify what is natural, this article examines the ways that non-programmers express solutions to problems that were chosen to be representative of common programming tasks. The vocabulary and structure in these solutions is compared with the vocabulary and structure in modern programming languages, to identify the features and paradigms that seem to match these natural tendencies as well as those that do not. This information can be used by the designers of future programming languages to guide the selection and generation of language features. This design technique can result in languages that are easier to learn and use, because the languages will better match beginners' existing problem-solving abilities.},
	number = {2},
	journal = {International Journal of {Human-Computer} Studies},
	author = {Pane, John F. and Ratanamahatana, Chotirat  Ann and Myers, Brad A.},
	month = feb,
	year = {2001},
	pages = {237--264},
	file = {PaneRatanamahatanaMyers00.pdf:/home/pvh/.mozilla/firefox/pp9q0w3a.default/zotero/storage/FM6TR4ZX/PaneRatanamahatanaMyers00.pdf:application/pdf;ScienceDirect Snapshot:/home/pvh/.mozilla/firefox/pp9q0w3a.default/zotero/storage/U9T39C7P/S1071581900904105.html:text/html}
}